-true- and :q = q
-false- and :q = -false-

-true- or :q = -true-
-false- or :q = q

not -true- = -false-
not -false- = -true-

item 0 of :l = head l
item :n of :l = item ( n - 1 ) of ( tail l )  

empty :l ? = l == []

:n times :x =
  case
    n == 0
    ()
    n == 1
    [ x ]
    -true-
    x :: ( ( n - 1 ) times x )

:p to :q = case
  p == q
  p  ( :: [] )
  -true-
  p ( :: ( ( p + 1 ) to q ) )

:p ++ :q =
  case
    p == []
    q ( :: [] )
    tail p == []
    head p ( :: ( q ( :: [] ) ) )
    -true-
    head p ( :: ( tail p ++ q ) )

:p , :q =
  case
    word p ?
    p ( :: ( q ( :: [] ) ) )
    -true-
    p ++ q

length of :l =
  case
    word l ?
    0
    l == []
    0
    -true-
    1 + ( length of ( tail l ) )


[ :x = partial-list 0 ( ( x :: [] ) :: [] )
partial-list 0  :l ]  = head l
partial-list 0 :l [  = partial-list 1 ( [] :: l )
partial-list :n :l [  = partial-list ( n + 1 ) ( [] :: l )
partial-list :n :l ]  = partial-list ( n - 1 ) ( ( item 1 of l ++ ( head l ) ) :: ( tail ( tail l ) ) )
partial-list 0 :l :x  = partial-list 0 ( ( ( head l ) ++ x ) :: [] )
partial-list :n :l :x = partial-list n ( ( ( head l ) ++ x ) :: ( tail l ) )


fill :pattern with :values =
  case 
    pattern == []
    ()
    -true-
    case 
      head pattern ( == _ )
      case        
        tail values == []
        head values ( fill ( tail pattern ) with values )
        -true-
        head values ( fill ( tail pattern ) with ( tail values ) )
      -true- 
      head pattern ( fill ( tail pattern ) with values )

:l map :pattern =
  case
    l == []
    []
    pattern == []
    l
    -true-
    ( fill pattern with ( ( head l ) ( :: [] ) ) ) ( :: ( ( tail l ) map pattern ) )


:list filter :pattern =
  case
    list == []
    []
    -true-
    case
      fill pattern with ( ( head list ) :: [] ) == -true-
      ( head list ) :: ( tail list filter pattern )
      -true-
      tail list filter pattern


:list fold left :init :pattern =
  case
    list == []
    init
    -true-    
    tail list fold left ( fill pattern with ( [ init ( head list ) ] ) ) pattern


:list fold right :pattern :init =
  case
    list == []
    init
    -true-    
    tail list fold right ( fill pattern with ( [ ( head list ) init ] ) ) pattern

quicksort [] = []
quicksort :list =
  pivot = head list
  rest = tail list
  lesser = quicksort ( rest filter ( [ _ <= pivot ] ) )
  greater = quicksort ( rest filter ( [ _ > pivot ] ) )
  lesser + ( [ pivot ] ) + greater

:x ^ 0 = 1
:x ^ :n = ( 0 to ( n - 1 ) ) fold left 1 ( [ _ * x ] )

:a : :b = [ a b ]