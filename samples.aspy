fib 0 = 1
fib 1 = 1
fib :n = ( fib ( n - 1 ) ) + ( fib ( n - 2 ) )

fib 7

fastfib :n-2 :n-1 :p :q =
  case
    p == q
    n-2 + n-1
    -true-
    fastfib n-1 ( n-2 + n-1 ) ( p + 1 ) q

( 1 to 25 ) map ( [ fastfib 0 1 1 _ ] )



1 factorial = 1
:n factorial = n - 1 factorial * n

7 factorial



is :name the best ? = case
  name == pop
  yes
  -true-
  no

is pop the best ?
is kik the best ?



(-- not working --)
[ :items ] = tail items
tail ( [ ( ' a b c ) ] )



முதல் = head
முதல் ( அ :: ( ஆ :: ( இ :: [] ) ) )



car :l = head ( tail l  )
cdr :l = tail ( tail l )




refer lib

otherwise = -true-

ways for making 0 with :coins = 1
ways for making :sum with [] = 0

ways for making :sum with :coins =
  case
    sum < 0
    0
    otherwise
    ways for making ( sum - ( head coins ) ) with coins + ( ways for making sum with ( tail coins ) )


ways for making 15 with ( 1 to 5 )


refer lib

unroll :l =
  case
    l == []
    ()
    word ( head l ) ?
    head l ( unroll ( tail l ) )
    -true-
    unroll ( head l ) ( unroll ( tail l ) )

x = 7
n = 1 2 3
exp = x ( n ) 2 5

fold :start :op :l =
  case
    l == []
    start
    -true-
    head l op ( fold start op ( tail l ) )

keep-in :cmp :l =
  case
    l == []
    []
    head l ( cmp ) == -true-
    head l ( :: ( keep-in cmp ( tail l ) ) )
    -true-
    keep-in cmp ( tail l )

:l map-r :f =
  case
    l == []
    []
    -true-
    ( f ) ( head l ) ( :: ( ( tail l ) map-r f ) )

<5 = < 5

keep-in <5 ( 1 to 10 )

l = ( 1 to 10 )

fold 0 + l

10+ = 10 +

[ [ 1 2 ] [ 3 4 ] ] map-r head
